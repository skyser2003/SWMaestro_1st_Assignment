// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etc/struct_etc.proto

#ifndef PROTOBUF_etc_2fstruct_5fetc_2eproto__INCLUDED
#define PROTOBUF_etc_2fstruct_5fetc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PKS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_etc_2fstruct_5fetc_2eproto();
void protobuf_AssignDesc_etc_2fstruct_5fetc_2eproto();
void protobuf_ShutdownFile_etc_2fstruct_5fetc_2eproto();

class Vec2;
class Vec3;
class FieldObjectBasicInfo;

// ===================================================================

class Vec2 : public ::google::protobuf::Message {
 public:
  Vec2();
  virtual ~Vec2();

  Vec2(const Vec2& from);

  inline Vec2& operator=(const Vec2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec2& default_instance();

  void Swap(Vec2* other);

  // implements Message ----------------------------------------------

  Vec2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec2& from);
  void MergeFrom(const Vec2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:PKS.Vec2)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_etc_2fstruct_5fetc_2eproto();
  friend void protobuf_AssignDesc_etc_2fstruct_5fetc_2eproto();
  friend void protobuf_ShutdownFile_etc_2fstruct_5fetc_2eproto();

  void InitAsDefaultInstance();
  static Vec2* default_instance_;
};
// -------------------------------------------------------------------

class Vec3 : public ::google::protobuf::Message {
 public:
  Vec3();
  virtual ~Vec3();

  Vec3(const Vec3& from);

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3& default_instance();

  void Swap(Vec3* other);

  // implements Message ----------------------------------------------

  Vec3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:PKS.Vec3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_etc_2fstruct_5fetc_2eproto();
  friend void protobuf_AssignDesc_etc_2fstruct_5fetc_2eproto();
  friend void protobuf_ShutdownFile_etc_2fstruct_5fetc_2eproto();

  void InitAsDefaultInstance();
  static Vec3* default_instance_;
};
// -------------------------------------------------------------------

class FieldObjectBasicInfo : public ::google::protobuf::Message {
 public:
  FieldObjectBasicInfo();
  virtual ~FieldObjectBasicInfo();

  FieldObjectBasicInfo(const FieldObjectBasicInfo& from);

  inline FieldObjectBasicInfo& operator=(const FieldObjectBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldObjectBasicInfo& default_instance();

  void Swap(FieldObjectBasicInfo* other);

  // implements Message ----------------------------------------------

  FieldObjectBasicInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldObjectBasicInfo& from);
  void MergeFrom(const FieldObjectBasicInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .PKS.Vec2 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::PKS::Vec2& pos() const;
  inline ::PKS::Vec2* mutable_pos();
  inline ::PKS::Vec2* release_pos();
  inline void set_allocated_pos(::PKS::Vec2* pos);

  // @@protoc_insertion_point(class_scope:PKS.FieldObjectBasicInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PKS::Vec2* pos_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_etc_2fstruct_5fetc_2eproto();
  friend void protobuf_AssignDesc_etc_2fstruct_5fetc_2eproto();
  friend void protobuf_ShutdownFile_etc_2fstruct_5fetc_2eproto();

  void InitAsDefaultInstance();
  static FieldObjectBasicInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// Vec2

// required float x = 1;
inline bool Vec2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vec2::x() const {
  // @@protoc_insertion_point(field_get:PKS.Vec2.x)
  return x_;
}
inline void Vec2::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:PKS.Vec2.x)
}

// required float y = 2;
inline bool Vec2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vec2::y() const {
  // @@protoc_insertion_point(field_get:PKS.Vec2.y)
  return y_;
}
inline void Vec2::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:PKS.Vec2.y)
}

// -------------------------------------------------------------------

// Vec3

// required float x = 1;
inline bool Vec3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vec3::x() const {
  // @@protoc_insertion_point(field_get:PKS.Vec3.x)
  return x_;
}
inline void Vec3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:PKS.Vec3.x)
}

// required float y = 2;
inline bool Vec3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vec3::y() const {
  // @@protoc_insertion_point(field_get:PKS.Vec3.y)
  return y_;
}
inline void Vec3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:PKS.Vec3.y)
}

// required float z = 3;
inline bool Vec3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vec3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vec3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vec3::z() const {
  // @@protoc_insertion_point(field_get:PKS.Vec3.z)
  return z_;
}
inline void Vec3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:PKS.Vec3.z)
}

// -------------------------------------------------------------------

// FieldObjectBasicInfo

// required int32 id = 1;
inline bool FieldObjectBasicInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldObjectBasicInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldObjectBasicInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldObjectBasicInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FieldObjectBasicInfo::id() const {
  // @@protoc_insertion_point(field_get:PKS.FieldObjectBasicInfo.id)
  return id_;
}
inline void FieldObjectBasicInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PKS.FieldObjectBasicInfo.id)
}

// required .PKS.Vec2 pos = 2;
inline bool FieldObjectBasicInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldObjectBasicInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldObjectBasicInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldObjectBasicInfo::clear_pos() {
  if (pos_ != NULL) pos_->::PKS::Vec2::Clear();
  clear_has_pos();
}
inline const ::PKS::Vec2& FieldObjectBasicInfo::pos() const {
  // @@protoc_insertion_point(field_get:PKS.FieldObjectBasicInfo.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PKS::Vec2* FieldObjectBasicInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PKS::Vec2;
  // @@protoc_insertion_point(field_mutable:PKS.FieldObjectBasicInfo.pos)
  return pos_;
}
inline ::PKS::Vec2* FieldObjectBasicInfo::release_pos() {
  clear_has_pos();
  ::PKS::Vec2* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void FieldObjectBasicInfo::set_allocated_pos(::PKS::Vec2* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.FieldObjectBasicInfo.pos)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PKS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_etc_2fstruct_5fetc_2eproto__INCLUDED
